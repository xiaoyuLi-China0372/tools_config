set fenc=utf-8
set fencs=utf-8,usc-bom,gb18030,gbk,gb2312,cp936,euc-jp
set nocp
set number
set ai
set si
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set sw=4
set ruler
set incsearch
set hlsearch
set showmatch
set matchtime=5
set ignorecase
set nocompatible
set backspace=indent,eol,start
set clipboard=unnamed
syntax enable
syntax on
filetype plugin indent on
autocmd FileType make set noexpandtab
colorscheme desert_my
"call pathogen#infect()

"curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
""""""""""""""vim-plug manage plugin""""""""""
call plug#begin('~/.vim/bundle')
" plugin on github repo
Plug 'tpope/vim-fugitive'
"Plug 'scrooloose/nerdtree'
Plug 'Valloric/YouCompleteMe'
Plug 'majutsushi/tagbar'
Plug 'vim-syntastic/syntastic'
Plug 'davidhalter/jedi-vim'
Plug 'Raimondi/delimitMate'
Plug 'vim-scripts/indentpython.vim'
"Plug 'dracula/vim', { 'as': 'dracula' }
"Plug 'zxqfl/tabnine-vim'
Plug 'vim-scripts/DoxygenToolkit.vim'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plug 'L9'
" plugin from git not hosted on github
"Plug 'git://git.wincent.com/command-t.git'
" plugin from git repos on your local machine
Plug '~/.vim/bundle/taglist_46'
Plug '~/.vim/bundle/NERDTree'
call plug#end()
" Brief help
" PlugInstall [name ...] [#threads]  install plugins
" PlugUpdate [name ...] [#threads]  install or update plugins
" PlugClean[!]  Remove unused directories (bang version will clean without prompt)
" PlugUpgrade   Upgrade vim-plug itself
" PlugStatus    Check the status of plugins
" PlugDiff  Examine changes from the previous update and the pending changes
" PlugSnapshot[!] [output path]  Generate script for restoring the current snapshot of the plugins


let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口
""""""""""""""setting ctags""""""""""""" 
set tags=tags;
set autochdir
""""""""""""""setting cscope""""""""""""" 
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=0  
	set cst  
	set csverb  
	set cspc=3
	"add any database in current directory
	"if filereadable("cscope.out")
	"	cs add cscope.out
	"else
	"	let cscope_file=findfile("cscope.out", ".;")  
	"	let cscope_pre=matchstr(cscope_file, ".*/")  
	"	if !empty(cscope_file) && filereadable(cscope_file)  
	"		exe "cs add" cscope_file cscope_pre  
	"	endif
	"	"cs add /drives/c/Users/xli/Downloads/net-snmp-5.4.4/cscope.out /drives/c/Users/xli/Downloads/net-snmp-5.4.4
	"	"cs add /drives/c/Users/xli/Downloads/linux-2.6.32.70/cscope.out /drives/c/Users/xli/Downloads/linux-2.6.32.70
	"	"cs add /home/xiaoyuli/projects/Bootloader/cscope.out /home/xiaoyuli/projects/Bootloader
	"	"cs add /home/xiaoyuli/projects/Firmware/cscope.out /home/xiaoyuli/projects/Firmware
	"endif
	set cscopequickfix=s-,c-,d-,i-,t-,e-,g-,f-
endif
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"let g:NERDTreeDirArrowExpandable = '▸'
"let g:NERDTreeDirArrowCollapsible = '▾'

" cancel syntastic check python
let g:syntastic_ignore_files=['.*\.py$']

"syntastic setting
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 2
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_enable_signs = 1
"let g:syntastic_error_symbol = 'E'
"let g:syntastic_warning_symbol = 'W'
"let g:syntastic_enable_highlighting = 1
"let g:syntastic_echo_current_error = 1
"let g:syntastic_cpp_checkers = ['gcc']
"let g:syntastic_c_checkers = ['gcc']
"let g:syntastic_cpp_compiler = 'gcc'
"let g:syntastic_cpp_compiler_options = '-std=c++11'

" YouCompleteMe plugin config
"let g:ycm_show_diagnostics_ui = 0
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示
let g:ycm_python_binary_path='/usr/bin/python3'
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" 不显示开启vim时检查ycm_extra_conf文件的信息
let g:ycm_confirm_extra_conf=0
" 开启基于tag的补全，可以在这之后添加需要的标签路径
let g:ycm_collect_identifiers_from_tags_files= 1
" 注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
" 输入第 2 个字符开始补全
let g:ycm_min_num_of_chars_for_completion= 2
" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 开启语义补全
let g:ycm_seed_identifiers_with_syntax= 1
" 在注释输入中也能补全
let g:ycm_complete_in_comments = 1
" 在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
set completeopt=longest,menu
set completeopt-=preview
" 设置在下面几种格式的文件上屏蔽ycm
let g:ycm_filetype_blacklist = {
\ 'tagbar' : 1,
\ 'taglist' : 1,
\ 'nerdtree' : 1,
\}

